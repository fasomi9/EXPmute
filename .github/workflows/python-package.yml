import logging
import re
import time
from typing import Any, List

from telethon import TelegramClient
from telethon.hints import Entity
from telethon.tl.custom import Message
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.utils import get_peer_id

from .. import loader, security, utils

logger = logging.getLogger(__name__)

USER_ID_RE = re.compile(r"^(-100)?\d+$")


# pylint: disable=invalid-name
def s2time(string) -> int:
    """Parse time from text `string`"""
    r = {}  # results

    for time_type in ["mon", "w", "d", "h", "m", "s"]:
        try:
            r[time_type] = int(re.search(rf"(\d+)\s*{time_type}", string)[1])
        except TypeError:
            r[time_type] = 0

    return (
        r["mon"] * 86400 * 30
        + r["w"] * 86400 * 7
        + r["d"] * 86400
        + r["h"] * 3600
        + r["m"] * 60
        + r["s"]
    )


# pylint: disable=consider-using-f-string
def get_link(user: Entity) -> str:
    """Return permanent link to `user`"""
    return "<a href='tg://user?id={id}'>{name}</a>".format(
        id=user.id,
        name=utils.escape_html(
            user.first_name if hasattr(user, "first_name") else user.title
        ),
    )


def plural_number(n: int) -> str:
    """Pluralize number `n`"""
    return (
        "one"
        if n % 10 == 1 and n % 100 != 11
        else "few"
        if 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20)
        else "many"
    )


# noinspection PyCallingNonCallable,PyAttributeOutsideInit
# pylint: disable=not-callable,attribute-defined-outside-init,invalid-name
@loader.tds 
class MuteMod(loader.Module): 
    """–ó–∞–≤–∞–ª–∏—à–∫–∞ 0.4.""" 
    strings = {
        "name": "Ebloff",
        "author": "@shyatzd",
        "not_group": "üö´ <b>—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –µ–±–∞–ª—å–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ</b>",
        "muted": "üîá <b>—Å–ª–æ–º–∞–Ω–Ω–æ–µ –µ–±–∞–ª–æ {user} –ª–µ—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç {time}</b>",
        "muted_forever": "üîá <b> –≤–∞—à –µ–±–∞–ª—å–Ω–∏–∫ —É–ø–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞,–º–∏—Å—Å {user}</b>",
        "unmuted": "üîâ <b>{user} –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç </b>",
        "not_muted": "üö´ <b>This user wasn't muted</b>",
        "invalid_user": "üö´ <b>–ø—Ä–æ–≤–µ—Ä—å, —Ç–æ—á–Ω–æ –ª–∏ —Ç—É –ø—Å–∏–Ω—ã —Ç—ã –≤–≤–µ–ª</b>",
        "no_mute_target": "üßê <b>–∞ –∫–æ–º—É –µ–±–∞–ª—å–Ω–∏–∫ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ?</b>",
        "no_unmute_target": "üßê <b>–∞ –∫–æ–º—É –µ–±–∞–ª—å–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ?</b>",
        "mutes_empty": "üòî <b>–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–µ–±–æ–≤ –Ω–µ—Ç</b>",
        "muted_users": "üìÉ <b>–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–µ–±—ã:</b>\n{names}",
        "cleared": "üßπ <b>–ø–æ—á–∏—â–µ–Ω—ã –∑–∞–µ–±—ã –≤–æ –≤—Å–µ—Ö —à–ª—é—Ö–æ—Å–±–æ—Ä–Ω–∏–∫–∞—Ö </b>",
        "cleared_all": "üßπ <b> –ø–æ—á–∏—â–µ–Ω—ã –≤—Å–µ –∑–∞–µ–±—ã</b>",
        "s_one": "second",
        "s_few": "seconds",
        "s_many": "seconds",
        "m_one": "minute",
        "m_few": "minutes",
        "m_many": "minutes",
        "h_one": "hour",
        "h_few": "hours",
        "h_many": "hours",
        "d_one": "day",
        "d_few": "days",
        "d_many": "days",
    }
 
    async def client_ready(self, client, db): 
        self.db = db 
 
    async def –µ–æcmd(self, message): 
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–±–ª–æ–æ—Ñ—Ñ. –ò—Å–ø–æ–ª—å–∑—É–π: .–µ–æ <@ –∏–ª–∏ —Ä–µ–ø–ª–∞–π>.""" 
        if message.chat: 
            chat = await message.get_chat() 
            if not chat.admin_rights and not chat.creator: 
                return await message.edit("<b>—Å–ª—ã—à—å —á–º–æ –¥–∞–π –ø—Ä–∞–≤–∞ :(</b>") 
            else: 
                if chat.admin_rights.delete_messages == False: 
                    return await message.edit("<b>–î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ë–ø—Ç</b>") 
 
        args = utils.get_args_raw(message) 
        reply = await message.get_reply_message() 
        chatid = str(message.chat_id) 
        mutes = self.db.get("Mute", "mutes", {}) 
 
        if not args and not reply: 
            entityid = str(message.chat_id) 
        else: 
            if args:  
                entity = await message.client.get_entity(int(args) if args.isnumeric() else args) 
            else: 
                entity = await message.client.get_entity(reply.sender_id) 
            entityid = str(entity.id)  
 
        if chatid not in mutes: 
            mutes.setdefault(chatid, []) 
 
        if entityid not in mutes[chatid]: 
            mutes[chatid].append(entityid) 
            self.db.set("Mute", "mutes", mutes) 
            if entityid == chatid: 
                return await message.edit("<b>–ú–∏–Ω—É—Å –®–ª—é—Ö–æ—Å–±–æ—Ä–Ω–∏–∫</b>") 
            return await message.edit("<b>–î–∞–ó–∞–≤–∞–ª–∏–ï–±–∞–ª–æ</b>") 
        else: 
            mutes[chatid].remove(entityid) 
            if len(mutes[chatid]) == 0: 
                mutes.pop(chatid) 
            self.db.set("Mute", "mutes", mutes) 
            if entityid == chatid: 
                return await message.edit("<b>–î–∞ –±—É–¥–µ—Ç –∂–∏—Ç—å —ç—Ç–æ—Ç —à–ª—é—Ö–æ—Å–±–æ—Ä–Ω–∏–∫</b>") 
            return await message.edit("<b>–∂–∏–≤–∏ –µ–±–ª–æ</b>") 
 
    async def seteblocmd(self, message): 
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: .seteblo <clear/clearall (–ø–æ –∂–µ–ª–∞–Ω–∏—é)>.""" 
        try: 
            args = utils.get_args_raw(message) 
            mutes = self.db.get("Mute", "mutes", {}) 
            chatid = str(message.chat_id) 
            ls = mutes[chatid] 
            ll = len(ls) 
            users = "" 
            if args == "clear": 
                mutes.pop(chatid) 
                self.db.set("Mute", "mutes", mutes) 
                return await message.edit("<b>–µ–±–ª–æ–æ—Ñ—Ñ –æ—á–∏—â–µ–Ω.</b>") 
            if args == "clearall": 
                self.db.set("Mute", "mutes", {}) 
                return await message.edit("<b>–µ–±–ª–æ–æ—Ñ—Ñ –æ—á–∏—â–µ–Ω –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.</b>") 
            for _ in ls: 
                if _ == chatid: 
                    users += "–≠—Ç–æ—Ç —á–∞—Ç" 
                try: 
                    user = await message.client.get_entity(int(_)) 
                    users += f"‚Ä¢ <a href=\"tg://user?id={int(_)}\">{user.first_name}</a> <b>| [</b><code>{_}</code><b>]</b>\n" 
                except: 
                    ls.remove(_) 
                    self.db.set("Mute", "mutes", mutes) 
            await message.edit(f"<b>–í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞—ë–±—ã: {ll}</b>\n\n{users}") 
        except KeyError: return await message.edit("<b>–ï–±–ª–æ—Ñ—Ñ —á–∏—Å—Ç.</b>") 
 
    async def watcher(self, message): 
        try: 
            if message.sender_id == (await message.client.get_me()).id: return 
            mutes = self.db.get("Mute", "mutes", {}) 
            chatid = str(message.chat_id) 
            if chatid not in mutes: return 
            if chatid in mutes[chatid]: 
                await message.client.delete_messages(int(chatid), message.id) 
            if str(message.sender_id) in mutes[chatid]: 
                await message.client.delete_messages(int(chatid), message.id) 
        except: pass
