# ---------------------------------------------------------------------------------
#  ,_     _          
#  |\_,-~/          
#  / _  _ |    ,--.  üåê This module was loaded through https://t.me/hikarimods , @shyatzd
# (  @  @ )   / ,-'  üîê Licensed under the GNU GPLv3.
#  \  _T_/-._( (     
#  /         `. \    ‚ö†Ô∏è Owner of this bot doesn't take responsibility for any
# |         _  \ |   errors caused by this module or this module being non-working
#  \ \ ,  /      |   and doesn't take ownership of any copyrighted material.
#   || |-_\__   /    
#  ((_/`(____,-'     
# ---------------------------------------------------------------------------------
# Name: Ebloff
# Description: –∑–∞—Ç—ã–∫–∞–µ—Ç —Ä—Ç—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–º–æ—â—å—é —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
# Author : https://t.me/killmeDarlingg
# Commands:
# .–µ–æ | .–µ–æ—Ñ | .–µ–æ–ª–∏—Å—Ç | .clr
# ---------------------------------------------------------------------------------

# Deletes messages from certain users
# Copyright ¬© 2022 @shyatzd

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# meta developer: @shyatzd
import logging
import re
import time
from typing import Any, List

from telethon import TelegramClient
from telethon.hints import Entity
from telethon.tl.custom import Message
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.utils import get_peer_id

from .. import loader, security, utils

logger = logging.getLogger(__name__)

USER_ID_RE = re.compile(r"^(-100)?\d+$")


# pylint: disable=invalid-name
def s2time(string) -> int:
    """Parse time from text `string`"""
    r = {}  # results

    for time_type in ["mon", "w", "d", "h", "m", "s"]:
        try:
            r[time_type] = int(re.search(rf"(\d+)\s*{time_type}", string)[1])
        except TypeError:
            r[time_type] = 0

    return (
        r["mon"] * 86400 * 30
        + r["w"] * 86400 * 7
        + r["d"] * 86400
        + r["h"] * 3600
        + r["m"] * 60
        + r["s"]
    )


# pylint: disable=consider-using-f-string
def get_link(user: Entity) -> str:
    """Return permanent link to `user`"""
    return "<a href='tg://user?id={id}'>{name}</a>".format(
        id=user.id,
        name=utils.escape_html(
            user.first_name if hasattr(user, "first_name") else user.title
        ),
    )


def plural_number(n: int) -> str:
    """Pluralize number `n`"""
    return (
        "one"
        if n % 10 == 1 and n % 100 != 11
        else "few"
        if 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20)
        else "many"
    )


# noinspection PyCallingNonCallable,PyAttributeOutsideInit
# pylint: disable=not-callable,attribute-defined-outside-init,invalid-name
@loader.tds 
class SwMuteMod(loader.Module): 
    """–ó–∞–≤–∞–ª–∏—à–∫–∞ 0.4.3""" 
    strings = {
        "name": "Ebloff",
        "author": "@killme000",
        "not_group": "üö´ <b>—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –µ–±–∞–ª—å–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ</b>",
        "muted": "üîá <b> {user},–≤–∞—à–µ –µ–±–∞–ª–æ —Å–ª–æ–º–∞–Ω–æ, –ª–µ—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç {time}</b>",
        "muted_forever": "üîá <b> –≤–∞—à –µ–±–∞–ª—å–Ω–∏–∫ —É–ø–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞,–º–∏—Å—Å {user}</b>",
        "unmuted": "üîâ <b>{user} –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç </b>",
        "not_muted": "üö´ <b>–Ω–µ –º–æ–≥—É —É—Ä–æ–Ω–∏—Ç—å –µ–±–∞–ª—å–Ω–∏–∫ —É —ç—Ç–æ–π —à–ª—é—Ö–∏</b>",
        "invalid_user": "üö´ <b>–ø—Ä–æ–≤–µ—Ä—å, —Ç–æ—á–Ω–æ –ª–∏ —Ç—É –ø—Å–∏–Ω—ã —Ç—ã –≤–≤–µ–ª</b>",
        "no_mute_target": "üßê <b>–∞ –∫–æ–º—É –µ–±–∞–ª—å–Ω–∏–∫ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ?</b>",
        "no_unmute_target": "üßê <b>–∞ –∫–æ–º—É –µ–±–∞–ª—å–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ?</b>",
        "mutes_empty": "üòî <b>–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–µ–±–æ–≤ –Ω–µ—Ç</b>",
        "muted_users": "üìÉ <b>–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–µ–±—ã:</b>\n{names}",
        "cleared": "üßπ <b>–ø–æ—á–∏—â–µ–Ω—ã –∑–∞–µ–±—ã –≤–æ –≤—Å–µ—Ö —à–ª—é—Ö–æ—Å–±–æ—Ä–Ω–∏–∫–∞—Ö </b>",
        "cleared_all": "üßπ <b> –ø–æ—á–∏—â–µ–Ω—ã –≤—Å–µ –∑–∞–µ–±—ã</b>",
        "s_one": "second",
        "s_few": "seconds",
        "s_many": "seconds",
        "m_one": "minute",
        "m_few": "minutes",
        "m_many": "minutes",
        "h_one": "hour",
        "h_few": "hours",
        "h_many": "hours",
        "d_one": "day",
        "d_few": "days",
        "d_many": "days",
    }
 
    async def client_ready(self, client: TelegramClient, db):
        """client_ready hook"""
        self.client = client
        self.db = db

        await client(JoinChannelRequest(channel=self.strings("author")))

        self.cleanup()

    def get(self, key: str, default: Any = None):
        """Get value from database"""
        return self.db.get(self.strings("name"), key, default)

    def set(self, key: str, value: Any):
        """Set value in database"""
        return self.db.set(self.strings("name"), key, value)

    def format_time(self, seconds: int, max_words: int = None) -> str:
        """Format time to human-readable variant"""
        words = []
        time_dict = {
            "d": seconds // 86400,
            "h": seconds % 86400 // 3600,
            "m": seconds % 3600 // 60,
            "s": seconds % 60,
        }

        for time_type, count in time_dict.items():
            if max_words and len(words) >= max_words:
                break

            if count != 0:
                words.append(
                    f"{count} {self.strings(time_type + '_' + plural_number(count))}"
                )

        return " ".join(words)

    def mute(self, chat_id: int, user_id: int, until_time: int = 0):
        """–¥–æ–±–∞–≤–∏—Ç—å –µ–±–∞–ª—å–Ω–∏–∫ –≤ –ï–±–ª–æ—Ñ—Ñ-–ª–∏—Å—Ç"""
        chat_id = str(chat_id)
        user_id = str(user_id)

        mutes = self.get("mutes", {})
        mutes.setdefault(chat_id, {})
        mutes[chat_id][user_id] = until_time
        self.set("mutes", mutes)

        logger.debug("Muted user %s in chat %s", user_id, chat_id)

    def unmute(self, chat_id: int, user_id: int):
        """—É–±—Ä–∞—Ç—å –µ–±–∞–ª—å–Ω–∏–∫ –∏–∑ –ï–±–ª–æ—Ñ—Ñ-–ª–∏—Å—Ç–∞"""
        chat_id = str(chat_id)
        user_id = str(user_id)

        mutes = self.get("mutes", {})
        if chat_id in mutes and user_id in mutes[chat_id]:
            mutes[chat_id].pop(user_id)
        self.set("mutes", mutes)

        logger.debug("Unmuted user %s in chat %s", user_id, chat_id)

    def get_mutes(self, chat_id: int) -> List[int]:
        """Get current mutes for specified chat"""
        return [
            int(user_id)
            for user_id, until_time in self.get("mutes", {})
            .get(str(chat_id), {})
            .items()
            if until_time > time.time() or until_time == 0
        ]

    def get_mute_time(self, chat_id: int, user_id: int) -> int:
        """Get mute expiration timestamp"""
        return self.get("mutes", {}).get(str(chat_id), {}).get(str(user_id))

    def cleanup(self):
        """Cleanup expired mutes"""
        mutes = {}

        for chat_id, chat_mutes in self.get("mutes", {}).items():
            if new_chat_mutes := {
                user_id: until_time
                for user_id, until_time in chat_mutes.items()
                if until_time == 0 or until_time > time.time()
            }:
                mutes[chat_id] = new_chat_mutes

        self.set("mutes", mutes)

    def clear_mutes(self, chat_id: int = None):
        """Clear all mutes for given or all chats"""
        if chat_id:
            mutes = self.get("mutes", {})
            mutes.pop(str(chat_id), None)
            self.set("mutes", mutes)
        else:
            self.set("mutes", {})

    async def –µ–æcmd(self, message: Message):
        """<reply/username/id> <time> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–±–ª–æ –≤ –ï–±–ª–æ—Ñ—Ñ-–ª–∏—Å—Ç"""
        if not message.is_group:
            return await utils.answer(message, self.strings("not_group"))

        args = utils.get_args(message)
        reply = await message.get_reply_message()

        if reply and reply.sender_id:
            user_id = reply.sender_id
            user = await self.client.get_entity(reply.sender_id)
            string_time = " ".join(args) if args else False
        elif args:
            try:
                user = await self.client.get_entity(
                    int(args[0]) if USER_ID_RE.match(args[0]) else args[0]
                )
                user_id = get_peer_id(user)
            except ValueError:
                return await utils.answer(message, self.strings("no_mute_target"))
            string_time = " ".join(args[1:]) if len(args) else False
        else:
            return await utils.answer(message, self.strings("no_mute_target"))

        if string_time:
            if mute_seconds := s2time(" ".join(args)):
                self.mute(message.chat_id, user_id, int(time.time() + mute_seconds))
                return await utils.answer(
                    message,
                    self.strings("muted").format(
                        time=self.format_time(mute_seconds), user=get_link(user)
                    ),
                )

        self.mute(message.chat_id, user_id)
        await utils.answer(
            message, self.strings("muted_forever").format(user=get_link(user))
        )

    async def –µ–æ—Ñcmd(self, message: Message):
        """<reply/username/id> ‚Äî —É–±–µ—Ä–∞–µ—Ç –µ–±–ª–æ –∏–∑ –ï–±–ª–æ—Ñ—Ñ-–ª–∏—Å—Ç–∞"""
        if not message.is_group:
            return await utils.answer(message, self.strings("not_group"))

        args = utils.get_args(message)
        reply = await message.get_reply_message()

        if reply and reply.sender_id:
            user_id = reply.sender_id
            user = await self.client.get_entity(reply.sender_id)
        elif args:
            try:
                user = await self.client.get_entity(
                    int(args[0]) if USER_ID_RE.match(args[0]) else args[0]
                )
                user_id = get_peer_id(user)
            except ValueError:
                return await utils.answer(message, self.strings("no_unmute_target"))
        else:
            return await utils.answer(message, self.strings("no_unmute_target"))

        self.unmute(message.chat_id, user_id)
        await utils.answer(message, self.strings("unmuted").format(user=get_link(user)))

    async def –µ–æ–ª–∏—Å—Çcmd(self, message: Message):
        """–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –µ–±–ª–æ—Ñ—Ñ–∞"""
        if not message.is_group:
            return await utils.answer(message, self.strings("not_group"))

        mutes = self.get_mutes(message.chat_id)
        if not mutes:
            return await utils.answer(message, self.strings("mutes_empty"))

        self.cleanup()

        muted_users = []
        for mute_id in mutes:
            text = "‚Ä¢ "

            try:
                text += (
                    f"<i>{get_link(await self.client.get_entity(mute_id))}</i> "
                    f"(<code>{mute_id}</code>)"
                )
            except ValueError:
                text += f"<code>{mute_id}</code>"

            if until_ts := self.get_mute_time(message.chat_id, mute_id):
                time_formatted = self.format_time(
                    int(until_ts - time.time()),
                    max_words=2,
                )
                text += f" <b>({time_formatted} left)</b>"

            muted_users.append(text)

        await utils.answer(
            message, self.strings("muted_users").format(names="\n".join(muted_users))
        )

    async def Clrcmd(self, message: Message):
        """<all> ‚Äî —á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ –µ–±–ª–æ—Ñ—Ñ–∞"""
        if "all" in utils.get_args_raw(
            message
        ) and await self.allmodules.check_security(
            message, security.OWNER | security.SUDO
        ):
            self.clear_mutes()
            await utils.answer(message, self.strings("cleared_all"))
        else:
            self.clear_mutes(message.chat_id)
            await utils.answer(message, self.strings("cleared"))

    async def watcher(self, message: Message):
        """Handles incoming messages"""
        if (
            isinstance(message, Message)
            and not message.out
            and message.is_group
            and message.sender_id in self.get_mutes(message.chat_id)
        ):
            await message.delete()

            logger.debug(
                "Deleted message from user %s in chat %s",
                message.sender_id,
                message.chat_id,
            )
